@using BindNineCore.Abstraction.Domains
@using BindNineCore.Exceptions
@inject IDomainCreate _domainCreate
@inject IToastService _toastService
@if (!_toggle)
{
    <button class="btn btn-dark" @onclick="() => { _toggle = true; } " style="margin-bottom: 15px;">Create domain</button>
}
else
{
    <EditForm Model="Model" OnValidSubmit="ValidSubmitAsync" style="margin-bottom: 15px;">
        <DataAnnotationsValidator/>
        <ValidationSummary/>

        <div class="form-group">
            <label for="domain">Domain</label>
            <InputText id="domain" @bind-Value="@Model.Domain"  class="form-control" placeholder="Enter domain"/>
        </div>

        <button type="submit" class="btn btn-success">Create</button>
    </EditForm>
}
@code
{
    private bool _toggle;
    [Parameter] public EventCallback OnRefresh { get; set; }

    private DomainModel Model { get; set; } = new ();
    
    private async Task ValidSubmitAsync()
    {
        try
        {
            await _domainCreate.CreateDomainAsync(Model.Domain);
            _toggle = false;
            Model = new DomainModel();
            await OnRefresh.InvokeAsync();
            
            _toastService.ShowSuccess($"Domain created successfully.");
        }
        catch (BindNineCoreException ex)
        {
            _toastService.ShowError(ex.Message);
        }
    }

    private class DomainModel
    {
        [Hostname]
        public string Domain { get; set; }
    }
}
