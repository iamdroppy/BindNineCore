@using BindNineCore.Abstraction.Dns
@using BindNineCore.Abstraction
@using BindNineCore.Exceptions
@inject IDnsDelete _dnsDelete
@inject IToastService _toastService
<div class="col-sm-12 col-md-4">
    <div class="dns-box lightgray-bg">
        <input class="item" value="@Dns.Subdomain" disabled/>
        <select class="item" disabled><option>@Dns.RecordType.ToString()</option></select>
        <input class="item" disabled value="@Dns.Value"/>

        @if (Dns.CanBeDeleted)
        {
            <p class="col-12" style="text-align: center"><button class="btn btn-danger" @onclick="DeleteAsync">Delete</button></p>
        }
    </div>
</div>

@code
{
    [Parameter] public IDns Dns { get; set; }
    [Parameter] public EventCallback OnRefresh { get; set; }

    private async Task DeleteAsync(MouseEventArgs obj)
    {
        try
        {
            await _dnsDelete.DeleteRecordAsync(Dns.Id);
            await OnRefresh.InvokeAsync();
            _toastService.ShowSuccess($"Record deleted successfully.");
        }
        catch (BindNineCoreException ex)
        {
            _toastService.ShowError(ex.Message);
        }
    }
}
