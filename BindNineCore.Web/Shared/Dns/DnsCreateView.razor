@using BindNineCore.Abstraction.Domains
@using BindNineCore.Abstraction.Dns
@using BindNineCore.Abstraction
@using BindNineCore.Exceptions
@inject IDnsCreate _dnsCreate;
@inject IToastService _toastService

@if (!_toggle)
{
    <button class="btn btn-dark" @onclick="() => { _toggle = true; } " style="margin-bottom: 15px;">Add Record</button>
}
else
{
    
    <EditForm Model="Model" OnValidSubmit="ValidSubmitAsync" style="margin-bottom: 15px;">
        <DataAnnotationsValidator/>
        <ValidationSummary/>
        <div class="form-group">
            <label for="subdomain">Subdomain</label>
            <InputText id="subdomain" @bind-Value="@Model.Subdomain"  class="form-control" placeholder="Enter subdomain"/>
        </div>
        <div class="form-group">
            <label for="recordType">Subdomain</label>
            <InputSelect @bind-Value="@Model.RecordType" class="form-control" id="recordType">
                <option value="@RecordType.Alias">Alias</option>
                <option value="@RecordType.CNAME">CNAME</option>
            </InputSelect>
        </div>
         <div class="form-group">
             <label for="subdomain">Value</label>
             <InputText id="domain" @bind-Value="@Model.Value" class="form-control" placeholder="Points to..."/>
        </div>

        <button type="submit" class="btn btn-success">Create</button>
    </EditForm>
}
@code
{
    private bool _toggle;
    [Parameter] public Guid DomainId { get; set; }
    [Parameter] public EventCallback OnRefresh { get; set; }
    private DomainModel Model { get; set; } = new ();
    
    private async Task ValidSubmitAsync()
    {
        try
        {
            await _dnsCreate.AddDnsToDomainAsync(DomainId, Model.Subdomain, Model.RecordType, Model.Value);
            _toggle = false;
            Model = new DomainModel();
            await OnRefresh.InvokeAsync();
            _toastService.ShowSuccess($"Subdomain {Model.Subdomain} added successfully.");
        }
        catch (BindNineCoreException ex)
        {
            _toastService.ShowError(ex.Message);
        }
    }

    private class DomainModel
    {
        [Subdomain]
        public string Subdomain { get; set; }

        public string Value { get; set; }
        
        public RecordType RecordType { get; set; }
    }
}
