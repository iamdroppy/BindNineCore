@using BindNineCore.Abstraction.Domains
@using BindNineCore.Abstraction.Dns
@using BindNineCore.Abstraction
@inject IDnsCreate _dnsCreate;

@if (!_toggle)
{
    <button class="btn btn-dark" @onclick="() => { _toggle = true; } ">Add Record</button>
}
else
{
    <EditForm Model="Model" OnValidSubmit="ValidSubmitAsync">
        <DataAnnotationsValidator/>
        <ValidationSummary/>

        <InputText id="domain" @bind-Value="@Model.Subdomain"/> to <InputText id="domain" @bind-Value="@Model.Value"/>

        <button type="submit">Create</button>
    </EditForm>
}
@code
{
    private bool _toggle;
    [Parameter] public Guid DomainId { get; set; }
    [Parameter] public EventCallback OnRefresh { get; set; }
    private DomainModel Model { get; set; } = new ();
    
    private async Task ValidSubmitAsync()
    {
        await _dnsCreate.AddDnsToDomainAsync(DomainId, Model.Subdomain, RecordType.Alias, Model.Value);
        _toggle = false;
        Model = new DomainModel();
        await OnRefresh.InvokeAsync();
    }

    private class DomainModel
    {
        [Subdomain]
        public string Subdomain { get; set; }

        [IpAddress]
        public string Value { get; set; } = "127.0.0.1";
    }
}
